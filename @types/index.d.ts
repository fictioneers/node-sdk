import { components } from "./openapi";
import { AccessTokenResponse, DeleteResponse, InitialiseAndProgressUser, State } from "./types";
declare class Fictioneers {
    private readonly apiSecretKey;
    private userId;
    private accessToken;
    private accessTokenExpiry;
    private readonly _endpoint;
    /**
     * A lightweight SDK interface to the Fictioneers API
     * @param {string} apiSecretKey
     * @param {(null|string)} userId
     * @returns {object}
     */
    constructor({ apiSecretKey, userId, }: {
        apiSecretKey: string;
        userId?: null | string;
    });
    /**
     * generate and save a new ID Token which can be used to authenticate against the Audience APIs.
     * @returns {object}
     */
    getAccessToken(): Promise<AccessTokenResponse>;
    /**
     * Create a uuid v4 string
     * @returns {string}
     */
    static _uuidv4: () => string;
    /**
     * If necessary, generate and save a new ID Token which can be used to authenticate against the Audience APIs.
     * @returns {object}
     */
    setAccessToken(): Promise<AccessTokenResponse>;
    /**
     * Access the userId that may have been auto-generated by the SDK or supplied in the constructor.
     * @returns {string}
     */
    getUserId(): string;
    /**
     * Sets the userId after the constructor is called (i.e., overwrites the userId passed to the constructor, or replaces the default created uuidv4)
     * @param {string} userId
     */
    setUserId({ userId }: {
        userId: string;
    }): Promise<void>;
    private _getAuthHeaderSecretKey;
    private _getAuthHeadersBearer;
    private _doFetch;
    /**
     * List all published timelines which users can be placed on.
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#list-all-published-timelines
     */
    getTimelines(): Promise<components["schemas"]["Timeline"][]>;
    /**
     * Representation of a single timeline.
     * @param {string} timelineId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#retrieves-timeline
     */
    getTimeline({ timelineId, }: {
        timelineId: string;
    }): Promise<components["schemas"]["Timeline"]>;
    /**
     * Representation of a single timeline's events and metadata.
     * @param {string} timelineId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#lists-all-timeline-events-2
     */
    getTimelineEvents({ timelineId, }: {
        timelineId: string;
    }): Promise<components["schemas"]["TimelineEvent"][]>;
    /**
     * List of all users on timeline.
     * @param {string} timelineId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#list-all-timeline-users
     */
    getTimelineUsers({ timelineId, }: {
        timelineId: string;
    }): Promise<components["schemas"]["User"][]>;
    /**
     * Delete all users on a timeline.
     * @param {string} timelineId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#delete-all-timeline-users
     */
    deleteTimelineUsers({ timelineId, }: {
        timelineId: string;
    }): Promise<DeleteResponse>;
    /**
     * Retrieves timeline user.
     * @param {string} timelineId
     * @param {string} userId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#retrieves-timeline-user
     */
    getTimelineUser({ timelineId, userId, }: {
        timelineId: string;
        userId?: null | string;
    }): Promise<components["schemas"]["User"]>;
    /**
     * Delete timeline user.
     * @param {string} timelineId
     * @param {string} userId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#delete-timeline-user
     */
    deleteTimelineUser({ timelineId, userId, }: {
        timelineId: string;
        userId?: null | string;
    }): Promise<DeleteResponse>;
    /**
     * Returns all event state changes filtered by timeline.
     * @param {string} timelineId
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#list-all-event-state-changes-for-timeline
     */
    getTimelineEventStateChanges({ timelineId, }: {
        timelineId: string;
    }): Promise<components["schemas"]["EventStateChange"][]>;
    /**
     * Retrieve detailed representation of the current user.
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#retrieve-current-user
     */
    getUser(): Promise<components["schemas"]["UserResponse"]>;
    /**
     * Delete the user and any user associated objects from the current timeline.
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#delete-current-user
     */
    deleteUser(): Promise<DeleteResponse>;
    /**
     * Create a new audience user for a Fictioneers powered experience.
     * @param {string} timelineId
     * @param {boolean} disableTimeGuards
     * @param {boolean} pauseAtBeats
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#create-new-audience-user
     */
    createUser({ timelineId, disableTimeGuards, pauseAtBeats, }: {
        timelineId: string;
        disableTimeGuards?: boolean;
        pauseAtBeats?: boolean;
    }): Promise<components["schemas"]["UserResponse"]>;
    /** Shortcut / combined method to initialise a new user and progress them */
    initialiseAndProgressUser({ timelineId, disableTimeGuards, pauseAtBeats, maxSteps, }: {
        timelineId: string;
        disableTimeGuards?: boolean;
        pauseAtBeats?: boolean;
        maxSteps?: number | null;
    }): Promise<InitialiseAndProgressUser>;
    /**
     * Representation of authenticated users narrative story state.
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#retrieves-user-narrative-state
     */
    getUserStoryState(): Promise<components["schemas"]["UserStoryStateResponse"]>;
    /**
     * Updates current timeline event ID
     * @param {string} currentTimelineEventId
     * @returns {Promise}
     */
    updateUserStoryState({ currentTimelineEventId, }: {
        currentTimelineEventId: string;
    }): Promise<components["schemas"]["UserStoryStateResponse"]>;
    /**
     * Progress events based on the authenticated user available transition events.
     * @param {(null|number)} maxSteps
     * @param {boolean} pauseAtBeats
     * @returns {Promise}
     * @link https://storage.googleapis.com/fictioneers-developer-docs/build/index.html#progress-timeline-events
     */
    progressUserStoryStateEvents({ maxSteps, pauseAtBeats, }: {
        maxSteps?: number | string | null;
        pauseAtBeats?: boolean;
    }): Promise<components["schemas"]["UserStoryStateResponse"]>;
    /**
     * Gets all timeline events
     * @returns {Promise}
     */
    getUserTimelineEvents(): Promise<components["schemas"]["UserTimelineEventListResponse"]>;
    /**
     * Marks a timeline event as COMPLETED (aka visited), or another state
     * @param {string} timelineEventId
     * @param {string} state
     * @returns {Promise}
     */
    updateUserTimelineEvent({ timelineEventId, state, }: {
        timelineEventId: string;
        state: State;
    }): Promise<components["schemas"]["UserTimelineEventDetailResponse"]>;
}
export default Fictioneers;
