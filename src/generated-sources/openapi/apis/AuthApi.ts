/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EphemeralTokenSerializer,
    EphemeralTokenSerializerFromJSON,
    EphemeralTokenSerializerToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TokenDeserializer,
    TokenDeserializerFromJSON,
    TokenDeserializerToJSON,
    TokenIntrospectionDeserializer,
    TokenIntrospectionDeserializerFromJSON,
    TokenIntrospectionDeserializerToJSON,
    TokenIntrospectionSerializer,
    TokenIntrospectionSerializerFromJSON,
    TokenIntrospectionSerializerToJSON,
} from '../models';

export interface GenerateTokensV1AuthTokenPostRequest {
    tokenDeserializer: TokenDeserializer;
}

export interface TokenInfoV1AuthIntrospectTokenPostRequest {
    tokenIntrospectionDeserializer: TokenIntrospectionDeserializer;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Generate a new Access Token which can be used to authenticate against the Audience API.  An API key is required in the HTTP Authorization header.
     * Generate a new Access Token for a user.
     */
    async generateTokensV1AuthTokenPostRaw(requestParameters: GenerateTokensV1AuthTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EphemeralTokenSerializer>> {
        if (requestParameters.tokenDeserializer === null || requestParameters.tokenDeserializer === undefined) {
            throw new runtime.RequiredError('tokenDeserializer','Required parameter requestParameters.tokenDeserializer was null or undefined when calling generateTokensV1AuthTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenDeserializerToJSON(requestParameters.tokenDeserializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EphemeralTokenSerializerFromJSON(jsonValue));
    }

    /**
     * Generate a new Access Token which can be used to authenticate against the Audience API.  An API key is required in the HTTP Authorization header.
     * Generate a new Access Token for a user.
     */
    async generateTokensV1AuthTokenPost(requestParameters: GenerateTokensV1AuthTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EphemeralTokenSerializer> {
        const response = await this.generateTokensV1AuthTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Inspect an Access token generated by the Fictioneers Authorization service.  Requires a secret API Key in the HTTP Authorization header. 
     * Introspect an Access Token (development use only).
     */
    async tokenInfoV1AuthIntrospectTokenPostRaw(requestParameters: TokenInfoV1AuthIntrospectTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TokenIntrospectionSerializer>> {
        if (requestParameters.tokenIntrospectionDeserializer === null || requestParameters.tokenIntrospectionDeserializer === undefined) {
            throw new runtime.RequiredError('tokenIntrospectionDeserializer','Required parameter requestParameters.tokenIntrospectionDeserializer was null or undefined when calling tokenInfoV1AuthIntrospectTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/auth/introspect-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenIntrospectionDeserializerToJSON(requestParameters.tokenIntrospectionDeserializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenIntrospectionSerializerFromJSON(jsonValue));
    }

    /**
     * Inspect an Access token generated by the Fictioneers Authorization service.  Requires a secret API Key in the HTTP Authorization header. 
     * Introspect an Access Token (development use only).
     */
    async tokenInfoV1AuthIntrospectTokenPost(requestParameters: TokenInfoV1AuthIntrospectTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TokenIntrospectionSerializer> {
        const response = await this.tokenInfoV1AuthIntrospectTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
