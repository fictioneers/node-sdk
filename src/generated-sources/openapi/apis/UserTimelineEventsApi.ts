/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PatchUserTimelineEventDeserializer,
  ResponseListSerializerUserTimelineEventSerializer,
  ResponseSerializerUserTimelineEventSerializer,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PatchUserTimelineEventDeserializerFromJSON,
    PatchUserTimelineEventDeserializerToJSON,
    ResponseListSerializerUserTimelineEventSerializerFromJSON,
    ResponseListSerializerUserTimelineEventSerializerToJSON,
    ResponseSerializerUserTimelineEventSerializerFromJSON,
    ResponseSerializerUserTimelineEventSerializerToJSON,
} from '../models';

export interface UpdateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatchRequest {
    timelineEventId: string;
    patchUserTimelineEventDeserializer: PatchUserTimelineEventDeserializer;
}

/**
 * 
 */
export class UserTimelineEventsApi extends runtime.BaseAPI {

    /**
     * List endpoint for user timeline events ordered by step index (including events in an INITIAL state).
     * Lists all timeline events for user.
     */
    async listTimelineEventsForUserV1UserTimelineEventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListSerializerUserTimelineEventSerializer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Fictioneers API HTTP Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/user-timeline-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListSerializerUserTimelineEventSerializerFromJSON(jsonValue));
    }

    /**
     * List endpoint for user timeline events ordered by step index (including events in an INITIAL state).
     * Lists all timeline events for user.
     */
    async listTimelineEventsForUserV1UserTimelineEventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListSerializerUserTimelineEventSerializer> {
        const response = await this.listTimelineEventsForUserV1UserTimelineEventsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Patch endpoint for user timeline events.
     * Update a user timeline event
     */
    async updateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatchRaw(requestParameters: UpdateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSerializerUserTimelineEventSerializer>> {
        if (requestParameters.timelineEventId === null || requestParameters.timelineEventId === undefined) {
            throw new runtime.RequiredError('timelineEventId','Required parameter requestParameters.timelineEventId was null or undefined when calling updateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatch.');
        }

        if (requestParameters.patchUserTimelineEventDeserializer === null || requestParameters.patchUserTimelineEventDeserializer === undefined) {
            throw new runtime.RequiredError('patchUserTimelineEventDeserializer','Required parameter requestParameters.patchUserTimelineEventDeserializer was null or undefined when calling updateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Fictioneers API HTTP Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/user-timeline-events/{timeline_event_id}`.replace(`{${"timeline_event_id"}}`, encodeURIComponent(String(requestParameters.timelineEventId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserTimelineEventDeserializerToJSON(requestParameters.patchUserTimelineEventDeserializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSerializerUserTimelineEventSerializerFromJSON(jsonValue));
    }

    /**
     * Patch endpoint for user timeline events.
     * Update a user timeline event
     */
    async updateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatch(requestParameters: UpdateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSerializerUserTimelineEventSerializer> {
        const response = await this.updateUserTimelineEventV1UserTimelineEventsTimelineEventIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
