/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUserDeserializer,
    CreateUserDeserializerFromJSON,
    CreateUserDeserializerToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ResponseSerializerUserSerializer,
    ResponseSerializerUserSerializerFromJSON,
    ResponseSerializerUserSerializerToJSON,
} from '../models';

export interface CreateUserV1UsersPostRequest {
    createUserDeserializer: CreateUserDeserializer;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create a new audience user for a Fictioneers powered experience.
     * Create new audience user
     */
    async createUserV1UsersPostRaw(requestParameters: CreateUserV1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ResponseSerializerUserSerializer>> {
        if (requestParameters.createUserDeserializer === null || requestParameters.createUserDeserializer === undefined) {
            throw new runtime.RequiredError('createUserDeserializer','Required parameter requestParameters.createUserDeserializer was null or undefined when calling createUserV1UsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Fictioneers API HTTP Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDeserializerToJSON(requestParameters.createUserDeserializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSerializerUserSerializerFromJSON(jsonValue));
    }

    /**
     * Create a new audience user for a Fictioneers powered experience.
     * Create new audience user
     */
    async createUserV1UsersPost(requestParameters: CreateUserV1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ResponseSerializerUserSerializer> {
        const response = await this.createUserV1UsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the user and any user associated objects from the current timeline.
     * Delete current user
     */
    async deleteUserV1UsersMeDeleteRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Fictioneers API HTTP Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the user and any user associated objects from the current timeline.
     * Delete current user
     */
    async deleteUserV1UsersMeDelete(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteUserV1UsersMeDeleteRaw(initOverrides);
    }

    /**
     * Retrieve detailed representation of the current user (and user story state).
     * Retrieve current user
     */
    async getUserMeV1UsersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ResponseSerializerUserSerializer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Fictioneers API HTTP Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSerializerUserSerializerFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed representation of the current user (and user story state).
     * Retrieve current user
     */
    async getUserMeV1UsersMeGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ResponseSerializerUserSerializer> {
        const response = await this.getUserMeV1UsersMeGetRaw(initOverrides);
        return await response.value();
    }

}
