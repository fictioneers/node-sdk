/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventStateChangeSerializer,
    EventStateChangeSerializerFromJSON,
    EventStateChangeSerializerToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TimelineEventSerializer,
    TimelineEventSerializerFromJSON,
    TimelineEventSerializerToJSON,
    TimelineSerializer,
    TimelineSerializerFromJSON,
    TimelineSerializerToJSON,
    UserSerializer,
    UserSerializerFromJSON,
    UserSerializerToJSON,
} from '../models';

export interface DeleteAllTimelineUsersV1TimelinesTimelineIdUsersDeleteRequest {
    timelineId: string;
}

export interface DeleteTimelineUserV1TimelinesTimelineIdUsersUserIdDeleteRequest {
    timelineId: string;
    userId: string;
}

export interface GetTimelineUserV1TimelinesTimelineIdUsersUserIdGetRequest {
    timelineId: string;
    userId: string;
}

export interface GetTimelineUsersV1TimelinesTimelineIdUsersGetRequest {
    timelineId: string;
}

export interface GetTimelineV1TimelinesTimelineIdGetRequest {
    timelineId: string;
}

export interface ListAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGetRequest {
    timelineId: string;
}

export interface ListTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGetRequest {
    timelineId: string;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Delete all users on a timeline.
     * Delete all timeline users
     */
    async deleteAllTimelineUsersV1TimelinesTimelineIdUsersDeleteRaw(requestParameters: DeleteAllTimelineUsersV1TimelinesTimelineIdUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling deleteAllTimelineUsersV1TimelinesTimelineIdUsersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/users`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all users on a timeline.
     * Delete all timeline users
     */
    async deleteAllTimelineUsersV1TimelinesTimelineIdUsersDelete(requestParameters: DeleteAllTimelineUsersV1TimelinesTimelineIdUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteAllTimelineUsersV1TimelinesTimelineIdUsersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete timeline user.
     * Delete timeline user
     */
    async deleteTimelineUserV1TimelinesTimelineIdUsersUserIdDeleteRaw(requestParameters: DeleteTimelineUserV1TimelinesTimelineIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling deleteTimelineUserV1TimelinesTimelineIdUsersUserIdDelete.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteTimelineUserV1TimelinesTimelineIdUsersUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/users/{user_id}`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete timeline user.
     * Delete timeline user
     */
    async deleteTimelineUserV1TimelinesTimelineIdUsersUserIdDelete(requestParameters: DeleteTimelineUserV1TimelinesTimelineIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteTimelineUserV1TimelinesTimelineIdUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves timeline user.
     * Retrieves timeline user
     */
    async getTimelineUserV1TimelinesTimelineIdUsersUserIdGetRaw(requestParameters: GetTimelineUserV1TimelinesTimelineIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UserSerializer>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling getTimelineUserV1TimelinesTimelineIdUsersUserIdGet.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getTimelineUserV1TimelinesTimelineIdUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/users/{user_id}`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSerializerFromJSON(jsonValue));
    }

    /**
     * Retrieves timeline user.
     * Retrieves timeline user
     */
    async getTimelineUserV1TimelinesTimelineIdUsersUserIdGet(requestParameters: GetTimelineUserV1TimelinesTimelineIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UserSerializer> {
        const response = await this.getTimelineUserV1TimelinesTimelineIdUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of all users on timeline.
     * List all timeline users
     */
    async getTimelineUsersV1TimelinesTimelineIdUsersGetRaw(requestParameters: GetTimelineUsersV1TimelinesTimelineIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<UserSerializer>>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling getTimelineUsersV1TimelinesTimelineIdUsersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/users`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSerializerFromJSON));
    }

    /**
     * List of all users on timeline.
     * List all timeline users
     */
    async getTimelineUsersV1TimelinesTimelineIdUsersGet(requestParameters: GetTimelineUsersV1TimelinesTimelineIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<UserSerializer>> {
        const response = await this.getTimelineUsersV1TimelinesTimelineIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Representation of a single timeline.
     * Retrieves timeline
     */
    async getTimelineV1TimelinesTimelineIdGetRaw(requestParameters: GetTimelineV1TimelinesTimelineIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TimelineSerializer>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling getTimelineV1TimelinesTimelineIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimelineSerializerFromJSON(jsonValue));
    }

    /**
     * Representation of a single timeline.
     * Retrieves timeline
     */
    async getTimelineV1TimelinesTimelineIdGet(requestParameters: GetTimelineV1TimelinesTimelineIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TimelineSerializer> {
        const response = await this.getTimelineV1TimelinesTimelineIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all published timelines which users can be placed on.
     * List all published timelines
     */
    async getTimelinesV1TimelinesGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TimelineSerializer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimelineSerializerFromJSON));
    }

    /**
     * List all published timelines which users can be placed on.
     * List all published timelines
     */
    async getTimelinesV1TimelinesGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TimelineSerializer>> {
        const response = await this.getTimelinesV1TimelinesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all event state changes filtered by timeline.
     * List all event state changes for timeline.
     */
    async listAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGetRaw(requestParameters: ListAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<EventStateChangeSerializer>>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling listAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/event-state-changes`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventStateChangeSerializerFromJSON));
    }

    /**
     * Returns all event state changes filtered by timeline.
     * List all event state changes for timeline.
     */
    async listAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGet(requestParameters: ListAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<EventStateChangeSerializer>> {
        const response = await this.listAllTimelineEventStateChangesV1TimelinesTimelineIdEventStateChangesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all timeline events on a specific timeline.
     * Lists all timeline events
     */
    async listTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGetRaw(requestParameters: ListTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TimelineEventSerializer>>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling listTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Fictioneers API Key Header Authentication authentication
        }

        const response = await this.request({
            path: `/v1/timelines/{timeline_id}/timeline-events`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimelineEventSerializerFromJSON));
    }

    /**
     * Lists all timeline events on a specific timeline.
     * Lists all timeline events
     */
    async listTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGet(requestParameters: ListTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TimelineEventSerializer>> {
        const response = await this.listTimelineTimelineEventsV1TimelinesTimelineIdTimelineEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
