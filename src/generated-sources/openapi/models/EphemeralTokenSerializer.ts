/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Instead of our serializer level objects inheriting from BaseModel, they
 * should all inherit from BaseSerializer, which removes the burden of handling the
 * lookup of a entity key identifiers within our API view logic.
 * 
 * By enabling ORM_MODE we can pass in schema objects, and Pydantic will do a
 * __getattr__ style lookup, which will auto unpack the primary key from our
 * BaseSchema inherited object.
 * 
 * We also have a thin wrapper around the __init__, which helps to provide a nicer API
 * when unpacking the results of projection queries into our resource serializers. This
 * can be used in conjunction with the `get_projection_properties` helper to get all
 * entity property names from the datastore index.
 * @export
 * @interface EphemeralTokenSerializer
 */
export interface EphemeralTokenSerializer {
    /**
     * Access Token used to authenticate with Audience APIs.
     * @type {string}
     * @memberof EphemeralTokenSerializer
     */
    accessToken: string;
    /**
     * Time in seconds until the ID Token expires.
     * @type {number}
     * @memberof EphemeralTokenSerializer
     */
    expiresIn: number;
}

/**
 * Check if a given object implements the EphemeralTokenSerializer interface.
 */
export function instanceOfEphemeralTokenSerializer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "expiresIn" in value;

    return isInstance;
}

export function EphemeralTokenSerializerFromJSON(json: any): EphemeralTokenSerializer {
    return EphemeralTokenSerializerFromJSONTyped(json, false);
}

export function EphemeralTokenSerializerFromJSONTyped(json: any, ignoreDiscriminator: boolean): EphemeralTokenSerializer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'expiresIn': json['expires_in'],
    };
}

export function EphemeralTokenSerializerToJSON(value?: EphemeralTokenSerializer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.accessToken,
        'expires_in': value.expiresIn,
    };
}

