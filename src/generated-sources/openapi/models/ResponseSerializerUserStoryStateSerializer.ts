/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Meta } from './Meta';
import {
    MetaFromJSON,
    MetaFromJSONTyped,
    MetaToJSON,
} from './Meta';
import type { UserStoryStateSerializer } from './UserStoryStateSerializer';
import {
    UserStoryStateSerializerFromJSON,
    UserStoryStateSerializerFromJSONTyped,
    UserStoryStateSerializerToJSON,
} from './UserStoryStateSerializer';

/**
 * Base serializer class for all responses.
 * @export
 * @interface ResponseSerializerUserStoryStateSerializer
 */
export interface ResponseSerializerUserStoryStateSerializer {
    /**
     * 
     * @type {UserStoryStateSerializer}
     * @memberof ResponseSerializerUserStoryStateSerializer
     */
    data?: UserStoryStateSerializer;
    /**
     * 
     * @type {Error}
     * @memberof ResponseSerializerUserStoryStateSerializer
     */
    error?: Error | null;
    /**
     * 
     * @type {Meta}
     * @memberof ResponseSerializerUserStoryStateSerializer
     */
    meta?: Meta | null;
}

/**
 * Check if a given object implements the ResponseSerializerUserStoryStateSerializer interface.
 */
export function instanceOfResponseSerializerUserStoryStateSerializer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResponseSerializerUserStoryStateSerializerFromJSON(json: any): ResponseSerializerUserStoryStateSerializer {
    return ResponseSerializerUserStoryStateSerializerFromJSONTyped(json, false);
}

export function ResponseSerializerUserStoryStateSerializerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseSerializerUserStoryStateSerializer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : UserStoryStateSerializerFromJSON(json['data']),
        'error': !exists(json, 'error') ? undefined : json['error'],
        'meta': !exists(json, 'meta') ? undefined : MetaFromJSON(json['meta']),
    };
}

export function ResponseSerializerUserStoryStateSerializerToJSON(value?: ResponseSerializerUserStoryStateSerializer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': UserStoryStateSerializerToJSON(value.data),
        'error': value.error,
        'meta': MetaToJSON(value.meta),
    };
}

