/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AvailableBeat } from './AvailableBeat';
import {
    AvailableBeatFromJSON,
    AvailableBeatFromJSONTyped,
    AvailableBeatToJSON,
} from './AvailableBeat';
import type { ContentIntegrationSerializer } from './ContentIntegrationSerializer';
import {
    ContentIntegrationSerializerFromJSON,
    ContentIntegrationSerializerFromJSONTyped,
    ContentIntegrationSerializerToJSON,
} from './ContentIntegrationSerializer';
import type { NarrativeEventType } from './NarrativeEventType';
import {
    NarrativeEventTypeFromJSON,
    NarrativeEventTypeFromJSONTyped,
    NarrativeEventTypeToJSON,
} from './NarrativeEventType';
import type { UserInvokedTimelineEventState } from './UserInvokedTimelineEventState';
import {
    UserInvokedTimelineEventStateFromJSON,
    UserInvokedTimelineEventStateFromJSONTyped,
    UserInvokedTimelineEventStateToJSON,
} from './UserInvokedTimelineEventState';
import type { UserTimelineEventState } from './UserTimelineEventState';
import {
    UserTimelineEventStateFromJSON,
    UserTimelineEventStateFromJSONTyped,
    UserTimelineEventStateToJSON,
} from './UserTimelineEventState';

/**
 * Represents a user timeline event.
 * @export
 * @interface UserTimelineEventSerializer
 */
export interface UserTimelineEventSerializer {
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    threadId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    rowId: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    previousInRowTimelineEventId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    nextInRowTimelineEventId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserTimelineEventSerializer
     */
    relatedTimelineEventIds: Array<string>;
    /**
     * Identifies the step index in which this event becomes available.
     * @type {number}
     * @memberof UserTimelineEventSerializer
     */
    availableStepIndex: number;
    /**
     * 
     * @type {AvailableBeat}
     * @memberof UserTimelineEventSerializer
     */
    availableBeat?: AvailableBeat;
    /**
     * 
     * @type {UserTimelineEventState}
     * @memberof UserTimelineEventSerializer
     */
    state: UserTimelineEventState;
    /**
     * Future states which can be mutated by the user over API.
     * @type {Array<UserInvokedTimelineEventState>}
     * @memberof UserTimelineEventSerializer
     */
    availableStates: Array<UserInvokedTimelineEventState>;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventId: string;
    /**
     * 
     * @type {NarrativeEventType}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventType: NarrativeEventType;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventDescription?: string;
    /**
     * 
     * @type {Array<ContentIntegrationSerializer>}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventContent: Array<ContentIntegrationSerializer>;
    /**
     * State change content associated with this event.
     * @type {{ [key: string]: Array<ContentIntegrationSerializer>; }}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventStateChangesContent: { [key: string]: Array<ContentIntegrationSerializer>; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UserTimelineEventSerializer
     */
    narrativeEventCustomData?: { [key: string]: string; };
}

/**
 * Check if a given object implements the UserTimelineEventSerializer interface.
 */
export function instanceOfUserTimelineEventSerializer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "rowId" in value;
    isInstance = isInstance && "relatedTimelineEventIds" in value;
    isInstance = isInstance && "availableStepIndex" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "availableStates" in value;
    isInstance = isInstance && "narrativeEventId" in value;
    isInstance = isInstance && "narrativeEventType" in value;
    isInstance = isInstance && "narrativeEventContent" in value;
    isInstance = isInstance && "narrativeEventStateChangesContent" in value;

    return isInstance;
}

export function UserTimelineEventSerializerFromJSON(json: any): UserTimelineEventSerializer {
    return UserTimelineEventSerializerFromJSONTyped(json, false);
}

export function UserTimelineEventSerializerFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserTimelineEventSerializer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'threadId': !exists(json, 'thread_id') ? undefined : json['thread_id'],
        'rowId': json['row_id'],
        'previousInRowTimelineEventId': !exists(json, 'previous_in_row_timeline_event_id') ? undefined : json['previous_in_row_timeline_event_id'],
        'nextInRowTimelineEventId': !exists(json, 'next_in_row_timeline_event_id') ? undefined : json['next_in_row_timeline_event_id'],
        'relatedTimelineEventIds': json['related_timeline_event_ids'],
        'availableStepIndex': json['available_step_index'],
        'availableBeat': !exists(json, 'available_beat') ? undefined : AvailableBeatFromJSON(json['available_beat']),
        'state': UserTimelineEventStateFromJSON(json['state']),
        'availableStates': ((json['available_states'] as Array<any>).map(UserInvokedTimelineEventStateFromJSON)),
        'narrativeEventId': json['narrative_event_id'],
        'narrativeEventType': NarrativeEventTypeFromJSON(json['narrative_event_type']),
        'narrativeEventTitle': !exists(json, 'narrative_event_title') ? undefined : json['narrative_event_title'],
        'narrativeEventDescription': !exists(json, 'narrative_event_description') ? undefined : json['narrative_event_description'],
        'narrativeEventContent': ((json['narrative_event_content'] as Array<any>).map(ContentIntegrationSerializerFromJSON)),
        'narrativeEventStateChangesContent': json['narrative_event_state_changes_content'],
        'narrativeEventCustomData': !exists(json, 'narrative_event_custom_data') ? undefined : json['narrative_event_custom_data'],
    };
}

export function UserTimelineEventSerializerToJSON(value?: UserTimelineEventSerializer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'thread_id': value.threadId,
        'row_id': value.rowId,
        'previous_in_row_timeline_event_id': value.previousInRowTimelineEventId,
        'next_in_row_timeline_event_id': value.nextInRowTimelineEventId,
        'related_timeline_event_ids': value.relatedTimelineEventIds,
        'available_step_index': value.availableStepIndex,
        'available_beat': AvailableBeatToJSON(value.availableBeat),
        'state': UserTimelineEventStateToJSON(value.state),
        'available_states': ((value.availableStates as Array<any>).map(UserInvokedTimelineEventStateToJSON)),
        'narrative_event_id': value.narrativeEventId,
        'narrative_event_type': NarrativeEventTypeToJSON(value.narrativeEventType),
        'narrative_event_title': value.narrativeEventTitle,
        'narrative_event_description': value.narrativeEventDescription,
        'narrative_event_content': ((value.narrativeEventContent as Array<any>).map(ContentIntegrationSerializerToJSON)),
        'narrative_event_state_changes_content': value.narrativeEventStateChangesContent,
        'narrative_event_custom_data': value.narrativeEventCustomData,
    };
}

