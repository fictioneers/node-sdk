/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddedRepresentationOfUserStoryState } from './EmbeddedRepresentationOfUserStoryState';
import {
    EmbeddedRepresentationOfUserStoryStateFromJSON,
    EmbeddedRepresentationOfUserStoryStateFromJSONTyped,
    EmbeddedRepresentationOfUserStoryStateToJSON,
} from './EmbeddedRepresentationOfUserStoryState';

/**
 * Representation of a user - including a mix of their authentication and experience
 * based properties. This should be considered a read-only serializer.
 * @export
 * @interface UserSerializer
 */
export interface UserSerializer {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UserSerializer
     */
    id: string;
    /**
     * 
     * @type {EmbeddedRepresentationOfUserStoryState}
     * @memberof UserSerializer
     */
    narrativeState?: EmbeddedRepresentationOfUserStoryState | null;
}

/**
 * Check if a given object implements the UserSerializer interface.
 */
export function instanceOfUserSerializer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UserSerializerFromJSON(json: any): UserSerializer {
    return UserSerializerFromJSONTyped(json, false);
}

export function UserSerializerFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSerializer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'narrativeState': !exists(json, 'narrative_state') ? undefined : EmbeddedRepresentationOfUserStoryStateFromJSON(json['narrative_state']),
    };
}

export function UserSerializerToJSON(value?: UserSerializer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'narrative_state': EmbeddedRepresentationOfUserStoryStateToJSON(value.narrativeState),
    };
}

