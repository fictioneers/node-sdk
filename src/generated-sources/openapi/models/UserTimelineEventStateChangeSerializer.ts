/* tslint:disable */
/* eslint-disable */
/**
 * Fictioneers - Audience APIs.
 * JSON APIs used to integrate with the Fictioneers platform served from https://api.fictioneers.co.uk
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentIntegrationSerializer } from './ContentIntegrationSerializer';
import {
    ContentIntegrationSerializerFromJSON,
    ContentIntegrationSerializerFromJSONTyped,
    ContentIntegrationSerializerToJSON,
} from './ContentIntegrationSerializer';
import type { NarrativeEventType } from './NarrativeEventType';
import {
    NarrativeEventTypeFromJSON,
    NarrativeEventTypeFromJSONTyped,
    NarrativeEventTypeToJSON,
} from './NarrativeEventType';
import type { UserTimelineEventState } from './UserTimelineEventState';
import {
    UserTimelineEventStateFromJSON,
    UserTimelineEventStateFromJSONTyped,
    UserTimelineEventStateToJSON,
} from './UserTimelineEventState';

/**
 * Represents a user timeline event state change.
 * @export
 * @interface UserTimelineEventStateChangeSerializer
 */
export interface UserTimelineEventStateChangeSerializer {
    /**
     * 
     * @type {UserTimelineEventState}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    state: UserTimelineEventState;
    /**
     * 
     * @type {Date}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    stateChangedAt?: Date;
    /**
     * 
     * @type {Array<ContentIntegrationSerializer>}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    stateChangeContent: Array<ContentIntegrationSerializer>;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    timelineEventId: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    threadId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    rowId: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    narrativeEventId: string;
    /**
     * 
     * @type {NarrativeEventType}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    narrativeEventType: NarrativeEventType;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    narrativeEventTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTimelineEventStateChangeSerializer
     */
    narrativeEventDescription?: string;
}

/**
 * Check if a given object implements the UserTimelineEventStateChangeSerializer interface.
 */
export function instanceOfUserTimelineEventStateChangeSerializer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "stateChangeContent" in value;
    isInstance = isInstance && "timelineEventId" in value;
    isInstance = isInstance && "rowId" in value;
    isInstance = isInstance && "narrativeEventId" in value;
    isInstance = isInstance && "narrativeEventType" in value;

    return isInstance;
}

export function UserTimelineEventStateChangeSerializerFromJSON(json: any): UserTimelineEventStateChangeSerializer {
    return UserTimelineEventStateChangeSerializerFromJSONTyped(json, false);
}

export function UserTimelineEventStateChangeSerializerFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserTimelineEventStateChangeSerializer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'state': UserTimelineEventStateFromJSON(json['state']),
        'stateChangedAt': !exists(json, 'state_changed_at') ? undefined : (new Date(json['state_changed_at'])),
        'stateChangeContent': ((json['state_change_content'] as Array<any>).map(ContentIntegrationSerializerFromJSON)),
        'timelineEventId': json['timeline_event_id'],
        'threadId': !exists(json, 'thread_id') ? undefined : json['thread_id'],
        'rowId': json['row_id'],
        'narrativeEventId': json['narrative_event_id'],
        'narrativeEventType': NarrativeEventTypeFromJSON(json['narrative_event_type']),
        'narrativeEventTitle': !exists(json, 'narrative_event_title') ? undefined : json['narrative_event_title'],
        'narrativeEventDescription': !exists(json, 'narrative_event_description') ? undefined : json['narrative_event_description'],
    };
}

export function UserTimelineEventStateChangeSerializerToJSON(value?: UserTimelineEventStateChangeSerializer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'state': UserTimelineEventStateToJSON(value.state),
        'state_changed_at': value.stateChangedAt === undefined ? undefined : (value.stateChangedAt.toISOString()),
        'state_change_content': ((value.stateChangeContent as Array<any>).map(ContentIntegrationSerializerToJSON)),
        'timeline_event_id': value.timelineEventId,
        'thread_id': value.threadId,
        'row_id': value.rowId,
        'narrative_event_id': value.narrativeEventId,
        'narrative_event_type': NarrativeEventTypeToJSON(value.narrativeEventType),
        'narrative_event_title': value.narrativeEventTitle,
        'narrative_event_description': value.narrativeEventDescription,
    };
}

